# Generated by Django 5.2.1 on 2025-05-27 19:47

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Capsule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A descriptive title for the capsule.', max_length=255)),
                ('description', models.TextField(blank=True, help_text="Optional longer description for the capsule's purpose or contents.")),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The exact date and time the capsule was created.')),
                ('delivery_date', models.DateTimeField(help_text='The scheduled date and time for the capsule to be delivered.')),
                ('is_delivered', models.BooleanField(default=False, help_text='Indicates if the capsule has been delivered.')),
                ('is_archived', models.BooleanField(default=False, help_text='Indicates if the capsule is archived by the owner (e.g., after delivery).')),
                ('delivery_method', models.CharField(choices=[('email', 'Email'), ('in_app', 'In-App Notification')], default='email', help_text='The primary method for delivering the capsule content.', max_length=50)),
                ('privacy_status', models.CharField(choices=[('private', 'Private (Only owner can access)'), ('shared', 'Shared (Specific recipients can access)')], default='private', help_text="Determines who can access the capsule's contents.", max_length=50)),
                ('transfer_on_inactivity', models.BooleanField(default=False, help_text='If true, capsule content may be transferred if owner account becomes inactive.')),
                ('transfer_recipient_email', models.EmailField(blank=True, help_text='Email of the designated recipient for transfer on inactivity.', max_length=254, null=True)),
                ('owner', models.ForeignKey(help_text='The user who created and owns this capsule.', on_delete=django.db.models.deletion.CASCADE, related_name='owned_capsules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Time Capsule',
                'verbose_name_plural': 'Time Capsules',
                'ordering': ['delivery_date'],
            },
        ),
        migrations.CreateModel(
            name='CapsuleContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('document', 'Document')], help_text='The type of content stored.', max_length=50)),
                ('text_content', models.TextField(blank=True, help_text="Text content for 'text' type capsules.", null=True)),
                ('file', models.FileField(blank=True, help_text="File content for 'image', 'video', 'audio', 'document' types.", null=True, upload_to='capsule_files/')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail for media files (e.g., video previews).', null=True, upload_to='capsule_thumbnails/')),
                ('upload_date', models.DateTimeField(auto_now_add=True, help_text='Date and time when this content was uploaded.')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of content within a capsule (for display purposes).')),
                ('capsule', models.ForeignKey(help_text='The capsule this content belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='capsules.capsule')),
            ],
            options={
                'verbose_name': 'Capsule Content',
                'verbose_name_plural': 'Capsule Contents',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_attempt_time', models.DateTimeField(auto_now_add=True, help_text='The date and time of this delivery attempt.')),
                ('delivery_method', models.CharField(choices=[('email', 'Email'), ('in_app', 'In-App Notification'), ('sms', 'SMS')], help_text='The method used for this specific delivery attempt.', max_length=50)),
                ('recipient_email', models.EmailField(blank=True, help_text='The email of the recipient (if applicable to the method).', max_length=254, null=True)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failure', 'Failure'), ('pending', 'Pending (e.g., for async email service)')], default='pending', help_text='The outcome of the delivery attempt.', max_length=50)),
                ('error_message', models.TextField(blank=True, help_text='Detailed error message if the delivery failed.', null=True)),
                ('external_id', models.CharField(blank=True, help_text='External ID from the delivery service (e.g., SendGrid message ID).', max_length=255, null=True)),
                ('capsule', models.ForeignKey(help_text='The capsule that was attempted to be delivered.', on_delete=django.db.models.deletion.CASCADE, related_name='delivery_logs', to='capsules.capsule')),
                ('recipient_user', models.ForeignKey(blank=True, help_text='The user ID of the recipient (if applicable to the method).', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Delivery Log',
                'verbose_name_plural': 'Delivery Logs',
                'ordering': ['-delivery_attempt_time'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(help_text='The content of the notification.')),
                ('notification_type', models.CharField(choices=[('delivery_success', 'Capsule Delivered'), ('delivery_fail', 'Capsule Delivery Failed'), ('new_shared_capsule', 'New Shared Capsule'), ('reminder', 'Reminder'), ('system_alert', 'System Alert'), ('transfer_notification', 'Capsule Transferred')], help_text='Categorizes the type of notification.', max_length=50)),
                ('is_read', models.BooleanField(default=False, help_text='Indicates if the user has viewed this notification.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the notification was created.')),
                ('read_at', models.DateTimeField(blank=True, help_text='The date and time the notification was read.', null=True)),
                ('capsule', models.ForeignKey(blank=True, help_text='The capsule related to this notification (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='capsules.capsule')),
                ('user', models.ForeignKey(help_text='The user who receives this notification.', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CapsuleRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_email', models.EmailField(help_text='The email address of the person who will receive the capsule.', max_length=254)),
                ('received_status', models.CharField(choices=[('pending', 'Pending Delivery'), ('sent', 'Sent'), ('failed', 'Failed'), ('opened', 'Opened')], default='pending', help_text='Status of the capsule delivery to this specific recipient.', max_length=20)),
                ('sent_date', models.DateTimeField(blank=True, help_text='The date and time the capsule was sent to this recipient.', null=True)),
                ('capsule', models.ForeignKey(help_text='The capsule this recipient is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='capsules.capsule')),
            ],
            options={
                'verbose_name': 'Capsule Recipient',
                'verbose_name_plural': 'Capsule Recipients',
                'unique_together': {('capsule', 'recipient_email')},
            },
        ),
    ]
