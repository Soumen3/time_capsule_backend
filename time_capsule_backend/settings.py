"""
Django settings for time_capsule_backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&-!a2ozdxfps(j^ou82v_hfa8w*1pxj_05-_qcbu3wogl61s37'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders', 
    'accounts',
    'capsules',
    'django_celery_beat',  # For periodic tasks
    'django_celery_results',  # For storing Celery task results
    'django_cleanup.apps.CleanupConfig', # Add this
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'time_capsule_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'time_capsule_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

tmpPostgres = urlparse(config('DATABASE_URL'))
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': tmpPostgres.path.replace('/', ''),
        'USER': tmpPostgres.username,
        'PASSWORD': tmpPostgres.password,
        'HOST': tmpPostgres.hostname,
        'PORT': 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication', # Keep for DRF browsable API

    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

# Email Configuration
# Ensure EMAIL_USER environment variable is set to your Gmail address (e.g., your.email@gmail.com)
# Ensure EMAIL_PASS environment variable is set to your Gmail App Password if 2FA is ON, or regular password if 2FA is OFF and Less Secure Apps is ON.
EMAIL_HOST_USER = config('EMAIL_USER') 
EMAIL_HOST_PASSWORD = config('EMAIL_PASSWORD')

# DEFAULT_FROM_EMAIL should ideally be the same as EMAIL_HOST_USER or an alias it can send as.
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER # Or your specific from address if different but authorized
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# Frontend URL (used for constructing links in emails)
FRONTEND_BASE_URL = 'http://localhost:5173' # Or your frontend's actual URL

# Add your Google Client ID here, ideally from an environment variable
# This is the same Client ID used by your frontend.
GOOGLE_CLIENT_ID = config('VITE_GOOGLE_CLIENT_ID', default=None) # Or a separate backend env var like GOOGLE_OAUTH_CLIENT_ID

# Celery Configuration Options
# Make sure your Redis server is running
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Using Redis as the broker
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0' # Using Redis for results backend
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # If you use Celery Beat for periodic tasks
CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_EXTENDED= True  # Store extended results in the database


# LOGGING CONFIGURATION
DISABLE_LOGGING = False
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # Use verbose for more details
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Set to DEBUG for more verbose output during development
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO', # Or 'DEBUG'
            'propagate': False,
        },
        'capsules': { # Your app's logger
            'handlers': ['console'],
            'level': 'DEBUG', # Set to DEBUG to see your custom log messages
            'propagate': False,
        },
        'celery': { # Celery's own logger
            'handlers': ['console'],
            'level': 'INFO', # Or 'DEBUG'
            'propagate': False,
        }
    }
}




DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_ACCESS_KEY_ID = config('IAM_USER_ACCESS_KEY')
AWS_SECRET_ACCESS_KEY = config('IAM_USER_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = config('S3BUCKET_NAME')
AWS_S3_REGION_NAME = config('REGION')  # e.g., 'us-west-2'
AWS_QUERYSTRING_AUTH = False  # Optional: to make the URLs public

STORAGES = {
    'default': {
        'BACKEND': 'storages.backends.s3boto3.S3Boto3Storage',
        'OPTIONS': {
            'access_key': AWS_ACCESS_KEY_ID,
            'secret_key': AWS_SECRET_ACCESS_KEY,
            'bucket_name': AWS_STORAGE_BUCKET_NAME,
            'region_name': AWS_S3_REGION_NAME,
        },
    },
    'staticfiles': {
        'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage',
    },
}

# Ensure MEDIA_URL is set to the S3 bucket URL
MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/'
MEDIA_ROOT = BASE_DIR / "media"


OTPOTP_VALIDITY_DURATION_SECONDS = 600